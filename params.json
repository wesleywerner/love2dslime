{"name":"LÖVE SLIME","tagline":"SLIME is a LÖVE library for creating point-and-click adventure games.","body":"# SLIME\r\n\r\nSLIME is a point-and-click adventure game library for L&Ouml;VE. It is inspired by the [SLUDGE game engine](https://opensludge.github.io/).\r\n\r\nThe name is an acronym for \"SLUDGE to L&Ouml;VE Inspired Mimicry Environment\".\r\n\r\n**Status:** In Development  \r\n**Version:** 0.1  \r\n\r\n# Features\r\n\r\n* Animated backgrounds\r\n* Actors with directional movement\r\n* Path finding movement\r\n* Status text\r\n* Hotspots\r\n* Actor Speech\r\n* Bags (inventory)\r\n\r\n**TODO**  \r\n\r\n* Tutorial\r\n* Tidy function parameter names\r\n\r\n# Thanks\r\n\r\nI want to thank these people for making use of their code:\r\n\r\n* kikito, for your animation library, [anim8](https://love2d.org/wiki/anim8).\r\n* GloryFish, for your [A* path finding](https://github.com/GloryFish/lua-astar) lua code.\r\n* Bresenham's Line Algorithm [from roguebasin.com](http://www.roguebasin.com/index.php?title=Bresenham%27s_Line_Algorithm#Lua)\r\n\r\nThank you!\r\n\r\n---\r\n\r\n# SLIME API\r\n\r\nThis API reference lists the available functionality of SLIME. You should read the [SLIME tutorial](https://github.com/wesleywerner/loveslime/blob/master/tutorial/tutorial.md) to see an example how these are used.\r\n\r\nTo use SLIME simply `require`:\r\n\r\n    slime = require (\"slime\")\r\n\r\n## Notes\r\n  \r\n* The cardinal directions are oriented so that `SOUTH` points to the bottom of your screen, and `NORTH` to the top. So an actor facing `SOUTH` is looking at the player.\r\n* Whenever an image is passed to SLIME, assume it is the filename of the image. The image data will be loaded for you.\r\n\r\n## Reset\r\n\r\n![func](api/func.png) `slime.reset ()`\r\n\r\nClear the stage, actors and hotspots. Call this before setting up a new stage. Note that bags (inventories) are _not_ cleared.\r\n\r\n## Backgrounds\r\n\r\n![func](api/func.png) `slime.background (backgroundfilename, [, delay])`\r\n\r\nAdd a background to the stage. `delay` sets how many milliseconds to display the background if multiple backgrounds are loaded, and may be omitted if only one background is set.\r\n\r\n![func](api/func.png) `slime.floor (floorfilename)`\r\n\r\nSet the floor where actors can walk. This is an image where black (`#000`) indicates non-walkable areas, and any other color for walkable.\r\n\r\n## Layers\r\n\r\nLayers define areas of your background where actors can walk behind.\r\n\r\n![func](api/func.png) `slime.layer (background, mask, baseline)`\r\n\r\nAdd a walk-behind layer. The `background` is where to cut the layer from. The `mask` defines where to cut.\r\n\r\nThe mask is an image with black (`#000`) where there is no layer, or any other colour to indicate the hide-behind layer.\r\n\r\nThe `baseline` is the y-position a character needs to be behind in order to be hidden by the layer.\r\n\r\n## Actors\r\n\r\nActors are items on your stage that may move or talk, like people, animals or robots. They can also be inanimate objects that may not move or talk but are animated, like doors, toasters and computers.\r\n\r\n![func](api/func.png) `slime.actor (name)`\r\n\r\nAdds and returns an actor to the stage. After this call you need to give the actor a position and image/animation for it to become visible on the stage. These properties are available:\r\n\r\n    actor.x = 50\r\n    actor.y = 50\r\n    actor.speechcolor = {255, 255, 255}     -- Set the speech color for this actor as {red, green, blue}\r\n\r\n![func](api/func.png) `slime.addImage (name, image)`\r\n\r\nSets a static (non-animated) image as an actor's sprite.\r\n\r\n![func](api/func.png) `slime.idleAnimation (name, tileset, w, h, south, southd [, west, westd, north, northd, east, eastd])`  \r\n![func](api/func.png) `slime.walkAnimation (name, tileset, w, h, south, southd [, west, westd, north, northd, east, eastd])`  \r\n![func](api/func.png) `slime.talkAnimation (name, tileset, w, h, south, southd [, west, westd, north, northd, east, eastd])`  \r\n\r\nThese are helper functions that in turn call `addAnimation` with the `keys` \"idle\", \"walk\" and \"talk\" respectively. \r\n\r\n  * The `name` of the actor that was created via `slime.actor`\r\n  * The `tileset` is a file name.\r\n  * The `w` and `h` are the width and height of each frame.\r\n  * The `south` and `southd` are the frames and delays for the south-facing animation.\r\n  * The other directions are optional but recommended. `SOUTH` will be used as default if none of the other directions are given.\r\n\r\nThe format of the `south` frames and delays follow the [anim8 library](https://github.com/kikito/anim8) convention. I recommend you go over there to read about the Frames format.\r\n\r\nNotes:\r\n\r\n* The `tileset` is a file name to the image tileset, they are cached for re-use. Multiple actors who use the same tileset will re-use the cached copies.\r\n* Only `south` and `southd` parameters are mandatory. If the rest are omitted then south will be used as the default for all directions.\r\n* If a `west` parameter is given, and `east` is `nil` or omitted, then the west animation will automatically be mirrored and used for the `east`.\r\n\r\n![func](api/func.png) `slime.addAnimation (name, key, tileset, w, h, frames, delays [,onLoop])`  \r\n\r\nThis is for adding custom animations.\r\n\r\n* The `name` of the actor that was created via `slime.actor`\r\n* The `key` is the animation key.\r\n* The `w` and `h` are the width and height of each frame.\r\n* The `frames` and `delays` are the frames and delays for the animation.\r\n* If you give the `onLoop` value as a function, it will be called when the animation loops.\r\n\r\n![func](api/func.png) `slime.moveActor (name, x, y, callback)`\r\n\r\nMove an actor by `name` to a point. There has to be a valid path to the destination. The `callback` is fired when the actor reaches the destination.\r\n\r\nExample:\r\n\r\n    local turnEgo = function() slime.turnActor(\"ego\", \"east\") end\r\n    slime.moveActor(\"ego\", 90, 34, turnEgo)\r\n    \r\n![func](api/func.png) `slime.moveActorTo (name, target, callback)`\r\n\r\nMove actor `name` to another actor `target`.\r\n\r\n![func](api/func.png) `slime.turnActor (name, direction)`\r\n\r\nTurns an Actor to face a direction, one of `south`, `west`, `north` or `east`.\r\n\r\nNote that because movement is asyncronous, calling this while an actor is moving won't have any effect as their movement will override their facing direction. This can be solved by calling `turnActor` as a callback to `moveActor`.\r\n\r\n## Hotspots\r\n\r\n![func](api/func.png) `slime.hotspot (name, callback, x, y, w, h [,data])`\r\n\r\nAdds a hotspot to the stage. The `callback` will fire if the pointer is over the hotspot when `slime.interact` is called.\r\n\r\nThe optional `data` value gets passed to your callback. This is useful for when you have multiple hotspots that all use the same callback function.\r\n\r\n![func](api/func.png) `slime.interact (x, y)`\r\n\r\nCheck if any object is under `x/y` and fire it's handler.\r\n\r\nReturns `true` if the handler was fired.\r\n\r\n![func](api/func.png) `slime.getObjects (x, y)`\r\n\r\nGets a table of objects under `x/y`, or `nil` if no object is found.\r\n\r\n## Status\r\n\r\n![func](api/func.png) `slime.status (text)`\r\n\r\nSet or unset the status bar text.\r\n\r\n## Drawing\r\n\r\n![func](api/func.png) `slime.update (dt)`\r\n\r\nUpdate animated backgrounds, actor movements and animations.\r\n\r\n![func](api/func.png) `slime.draw ([scale])`\r\n\r\nDraw the scene to the display. The `scale` parameter defaults to 1, and is only needed if you called `love.graphics.scale` before calling this function.\r\n\r\n## Actor Speech\r\n\r\nYou can queue multiple speeches at once, the actor animation will change to \"talk\" and the words will print on screen.\r\n\r\n![func](api/func.png) `slime.addSpeech (name, text)`\r\n\r\nQueue a speech for an actor by `name`.\r\n\r\n![func](api/func.png) `slime.someoneTalking ()`\r\n\r\nReturns `true` if there is speech displaying.\r\n\r\n## Bags\r\n\r\nBags are analogous to inventory. The bags system is very simple yet flexible: Each bag has a name and can hold multiple items. In this way it supports inventory for multiple actors.\r\n\r\n![func](api/func.png) `slime.bagInsert (bag, object)`\r\n\r\nInserts something into a bag.\r\n\r\n* The name of the `bag` can be anything, but for clarity, using an actor's name is a sensible choice.\r\n* The `object` is a table with a `name` value. You can add your own values to the object too.\r\n\r\nExample:\r\n\r\n    local theSpoon = { [\"name\"] = \"spoon\" }\r\n    slime.bagInsert (\"ego\", theSpoon)\r\n\r\n![func](api/func.png) `slime.bagContents (bag)`\r\n\r\nGets the contents of a bag as a table.\r\n\r\n![func](api/func.png) `slime.bagRemove (bag, name)`\r\n\r\nRemoves an item (`name`) from a `bag`.\r\n\r\n![func](api/func.png) `slime.inventoryChanged (bag)`\r\n\r\nThis is a **callback** function that you can implement if you want to be notified whenever a bag content changed. The name of the bag that changed is passed.\r\n\r\n![func](api/func.png) `slime.bagButton (name, image, callback, x, y, w, h, data)`\r\n\r\nAdd a hotspot with an image that draws on screen. \r\n\r\n## Settings\r\n\r\nSLIME offers these settings to customize your game:\r\n\r\n    slime.settings[\"status position\"] = 70      -- The Y position to print the built-in status text\r\n    slime.settings[\"status font size\"] = 12     -- The font size for status text\r\n    slime.settings[\"speech position\"] = 0       -- The Y position to print speech\r\n    slime.settings[\"speech font size\"] = 10     -- The font size for speech\r\n\r\n---\r\n\r\n# LICENSE\r\n\r\nThis program is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\nany later version.\r\n\r\nThis program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with this program. If not, see http://www.gnu.org/licenses/.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}